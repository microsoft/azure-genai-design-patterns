$schema: https://azuremlschemas.azureedge.net/promptflow/latest/Flow.schema.json
environment:
  python_requirements_txt: requirements.txt
inputs:
  chat_history:
    type: list
    default: []
    is_chat_history: true
    is_chat_input: false
  chat_input:
    type: string
    default: ""
    is_chat_input: true
  search_database_description:
    type: string
    default: "## Target Database Description The target search database is an Azure
      AI Search resource that contains the following fields:  * filterable_field
      | a searchable, filterable string field which can be populated with
      elements of the ## Filter List  * title | A brief, searchable summary or
      heading of a document or its segment, representing the main topic or
      subject * content | The main body of text or a detailed description of a
      document segment, including comprehensive information for full-text
      search"
    is_chat_input: false
  search_client_description:
    type: string
    default: "## Search Client Description Parameters:     search_text (str or None,
      Optional): A full-text search query expression. Use \"*\" or omit this
      parameter to match all documents.  Keyword-only
      Parameters:     include_total_count (bool, Optional): Specifies whether to
      fetch the total count of results. Default is False.     facets (List[str],
      Optional): The list of facet expressions to apply to the search
      query.     filter (str, Optional): The OData $filter expression to apply
      to the search query.     highlight_fields (str, Optional): Comma-separated
      list of field names to use for hit highlights.     highlight_post_tag
      (str, Optional): String tag appended to hit highlights. Must be set with
      highlight_pre_tag.     highlight_pre_tag (str, Optional): String tag
      prepended to hit highlights. Must be set with
      highlight_post_tag.     minimum_coverage (float, Optional): Percentage of
      the index that must be covered by a search query. Default is
      100.     order_by (List[str], Optional): List of OData $orderby
      expressions by which to sort the results.     query_type (str or
      QueryType, Optional): Specifies the syntax of the search query. Possible
      values include 'simple', 'full', 'semantic'. Default is
      'simple'.     scoring_parameters (List[str], Optional): List of parameter
      values to be used in scoring functions.     scoring_profile (str,
      Optional): Name of a scoring profile to evaluate match
      scores.     semantic_query (str, Optional): Separate search query used
      solely for semantic reranking, captions, and answers.     search_fields
      (List[str], Optional): List of field names to scope the full-text
      search.     search_mode (str or SearchMode, Optional): Specifies whether
      any or all of the search terms must be matched. Possible values include
      'any', 'all'.     query_answer (str or QueryAnswerType, Optional): If set,
      the query returns answers extracted from key passages. Possible values
      include 'none', 'extractive'.     query_answer_count (int, Optional):
      Configures the number of answers returned when query_answer is
      'extractive'. Default is 1.     query_answer_threshold (float, Optional):
      Confidence threshold for answers. Default is 0.7.     query_caption (str
      or QueryCaptionType, Optional): If set, the query returns captions
      extracted from key passages. Possible values include 'none', 'extractive'.
      Default is 'none'.     query_caption_highlight_enabled (bool, Optional):
      Determines whether highlighting is enabled for captions. Default is
      True.     semantic_configuration_name (str, Optional): Name of the
      semantic configuration used when processing documents for semantic
      queries.     select (List[str], Optional): List of fields to retrieve. If
      unspecified, all retrievable fields are included.     skip (int,
      Optional): Number of search results to skip. Cannot exceed
      100,000.     top (int, Optional): Number of search results to
      retrieve.     scoring_statistics (str or ScoringStatistics, Optional):
      Specifies whether to calculate scoring statistics globally or locally.
      Possible values include 'local', 'global'. Default is
      'local'.     session_id (str, Optional): Value used to create a sticky
      session for consistent results.     vector_queries (List[VectorQuery],
      Optional): Query parameters for vector and hybrid search
      queries.     vector_filter_mode (str or VectorFilterMode, Optional):
      Determines whether filters are applied before or after the vector search.
      Possible values include 'preFilter', 'postFilter'. Default is
      'preFilter'.     semantic_error_mode (str or SemanticErrorMode, Optional):
      Allows choosing whether a semantic call should fail completely or return
      partial results. Possible values include 'partial',
      'fail'.     semantic_max_wait_in_milliseconds (int, Optional): Upper bound
      on the time for semantic enrichment processing before the request fails."
  filter_list:
    type: string
    default: "## Filter List The strings that may be used in in the filterable_field
      of the search database are: DO NOT USE THE filterable_field as it is not
      populated"
  top:
    type: int
    default: 20
  query_type:
    type: string
    default: semantic
  semantic_configuration_name:
    type: string
    default: akb-semantic-config
  openai_embedding_model:
    type: string
    default: text-embedding-3-large
  aoai_api_version:
    type: string
    default: 2024-06-01
  dimensions:
    type: int
    default: 3072
  subscription_id:
    type: string
    default: ca68cf94-f445-43f1-8379-3d0100e293a2
  resource_group:
    type: string
    default: rg-ragagent2.0
  workspace_name:
    type: string
    default: ragagent20aihub
  ai_search_index_name:
    type: string
    default: rag-agent-langchainsplitter
outputs:
  chat_output:
    type: string
    reference: ${RAG_response_node.output}
    is_chat_output: true
nodes:
- name: entity_topic_tracking_query_rewrite_node
  type: llm
  source:
    type: code
    path: topic_tracking_query_modification_node.jinja2
  inputs:
    deployment_name: gpt-4o-global
    temperature: 0.25
    max_tokens: 6000
    response_format:
      type: text
    top_p: 0.2
    chat_history: ${inputs.chat_history}
    chat_input: ${inputs.chat_input}
    search_database_description: ${inputs.search_database_description}
    search_client_description: ${inputs.search_client_description}
    filter_list: ${inputs.filter_list}
  connection: ragagent20aiservices_aoai
  api: chat
- name: ai_search_query_python_node
  type: python
  source:
    type: code
    path: azure_ai_search_python_node.py
  inputs:
    chat_output_str: ${entity_topic_tracking_query_rewrite_node.output}
    top: ${inputs.top}
    query_type: ${inputs.query_type}
    semantic_configuration_name: ${inputs.semantic_configuration_name}
    openai_embedding_model: ${inputs.openai_embedding_model}
    aoai_api_version: ${inputs.aoai_api_version}
    dimensions: ${inputs.dimensions}
    subscription_id: ${inputs.subscription_id}
    resource_group: ${inputs.resource_group}
    workspace_name: ${inputs.workspace_name}
    ai_search_index_name: ${inputs.ai_search_index_name}
- name: RAG_response_node
  type: llm
  source:
    type: code
    path: RAG_response_node.jinja2
  inputs:
    deployment_name: gpt-4o-global
    temperature: 0.25
    max_tokens: 16000
    response_format:
      type: text
    chat_history: ${inputs.chat_history}
    search_results: ${ai_search_query_python_node.output}
    user_input: ${inputs.chat_input}
    entities_and_topics: ${entity_topic_tracking_query_rewrite_node.output}
  connection: ragagent20aiservices_aoai
  api: chat
